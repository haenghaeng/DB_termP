import psycopg2

# PostgreSQL 데이터베이스에 연결
def connect_db():
    return psycopg2.connect(
        dbname="sample2023",
        user="db2023",
        password="db!2023",
        host="::1",
        port="5432"
    )

# 병사 목록 조회
def view_soldiers(cursor):
    cursor.execute('''SELECT soldier_id, name, address, family_relationship, birthdate, role FROM PersonalInformation''')
    soldiers = cursor.fetchall()
    if soldiers:
        print("\n현재 등록된 병사 목록:")
        for soldier in soldiers:
            print(f"ID: {soldier[0]}, 이름: {soldier[1]}, 주소: {soldier[2]}, 가족 관계: {soldier[3]}, 생년월일: {soldier[4]}, 역할: {soldier[5]}")
    else:
        print("등록된 병사가 없습니다.")

# 특정 역할의 병사 목록 조회
def view_soldiers_by_role(cursor, role):
    cursor.execute('''SELECT soldier_id, name, address, family_relationship, birthdate FROM PersonalInformation WHERE role = %s''', (role,))
    soldiers = cursor.fetchall()
    if soldiers:
        print(f"\n{role} 목록:")
        for soldier in soldiers:
            print(f"ID: {soldier[0]}, 이름: {soldier[1]}, 주소: {soldier[2]}, 가족 관계: {soldier[3]}, 생년월일: {soldier[4]}")
    else:
        print(f"{role}에 해당하는 병사가 없습니다.")

# 병사 개인정보 추가
def add_soldier(cursor, name, address, family_relationship, birthdate, role):
    cursor.execute('''INSERT INTO PersonalInformation (name, address, family_relationship, birthdate, role)
                      VALUES (%s, %s, %s, %s, %s)''', (name, address, family_relationship, birthdate, role))
    print("병사 정보가 추가되었습니다.")

# 병사 개인정보 수정
def update_soldier(cursor, soldier_id, name=None, address=None, family_relationship=None, birthdate=None, role=None):
    updates = []
    params = []
    
    if name:
        updates.append("name=%s")
        params.append(name)
    if address:
        updates.append("address=%s")
        params.append(address)
    if family_relationship:
        updates.append("family_relationship=%s")
        params.append(family_relationship)
    if birthdate:
        updates.append("birthdate=%s")
        params.append(birthdate)
    if role:
        updates.append("role=%s")
        params.append(role)
    
    params.append(soldier_id)
    
    if updates:
        query = f'''UPDATE PersonalInformation SET {', '.join(updates)} WHERE soldier_id=%s'''
        cursor.execute(query, params)
        print("병사 정보가 수정되었습니다.")
    else:
        print("수정할 항목이 없습니다.")

# 병사 개인정보 삭제
def delete_soldier(cursor, soldier_id):
    cursor.execute('''DELETE FROM PersonalInformation WHERE soldier_id=%s''', (soldier_id,))
    print("병사 정보가 삭제되었습니다.")

# 개인정보 관리 기능
def manage_personal_info(cursor):
    while True:
        print("\n병사 개인정보 관리")
        print("1. 추가")
        print("2. 수정")
        print("3. 삭제")
        print("4. 조회")
        print("5. 종료")
        
        choice = input("원하는 기능의 번호를 선택하세요: ")

        if choice == '1':
            name = input("병사 이름: ")
            address = input("주소: ")
            family_relationship = input("가족 관계: ")
            birthdate = input("생년월일 (YYYY-MM-DD): ")
            role = input("역할: ")
            add_soldier(cursor, name, address, family_relationship, birthdate, role)

        elif choice == '2':
            view_soldiers(cursor)  # 현재 등록된 병사 목록 보기
            soldier_id = int(input("수정할 병사의 ID: "))

            while True:
                print("\n수정할 항목 선택")
                print("1. 이름")
                print("2. 주소")
                print("3. 가족 관계")
                print("4. 생년월일")
                print("5. 역할")
                print("6. 완료")
                
                edit_choice = input("수정할 항목의 번호를 선택하세요: ")

                if edit_choice == '1':
                    name = input("새로운 이름: ")
                    update_soldier(cursor, soldier_id, name=name)
                elif edit_choice == '2':
                    address = input("새로운 주소: ")
                    update_soldier(cursor, soldier_id, address=address)
                elif edit_choice == '3':
                    family_relationship = input("새로운 가족 관계: ")
                    update_soldier(cursor, soldier_id, family_relationship=family_relationship)
                elif edit_choice == '4':
                    birthdate = input("새로운 생년월일 (YYYY-MM-DD): ")
                    update_soldier(cursor, soldier_id, birthdate=birthdate)
                elif edit_choice == '5':
                    role = input("새로운 역할: ")
                    update_soldier(cursor, soldier_id, role=role)
                elif edit_choice == '6':
                    print("수정이 완료되었습니다.")
                    break
                else:
                    print("잘못된 입력입니다. 다시 시도하세요.")

        elif choice == '3':
            view_soldiers(cursor)  # 현재 등록된 병사 목록 보기
            soldier_id = int(input("삭제할 병사의 ID: "))
            delete_soldier(cursor, soldier_id)

        elif choice == '4':
            print("\n조회할 병사의 역할 선택")
            print("1. 무선병")
            print("2. 유선병")
            print("3. 정보보호병")
            print("4. 전산장비병")
            print("5. 운영통제실병사")
            
            role_choice = input("원하는 역할의 번호를 선택하세요: ")
            roles = {
                '1': "무선병",
                '2': "유선병",
                '3': "정보보호병",
                '4': "전산장비병",
                '5': "운영통제실병사"
            }
            role = roles.get(role_choice)
            if role:
                view_soldiers_by_role(cursor, role)
            else:
                print("잘못된 입력입니다.")

        elif choice == '5':
            print("종료합니다.")
            break

        else:
            print("잘못된 입력입니다. 다시 시도하세요.")

# 훈련 일정 추가
def add_training(cursor, soldier_id, training_date, training_details):
    cursor.execute('''INSERT INTO TrainingSchedule (soldier_id, training_date, training_details)
                      VALUES (%s, %s, %s)''', (soldier_id, training_date, training_details))
    print("훈련 일정이 추가되었습니다.")

# 특정 역할의 병사들에게 훈련 일정 조회
def get_training_by_role(cursor, role):
    cursor.execute('''SELECT ts.schedule_id, pi.name, ts.training_date, ts.training_details
                      FROM TrainingSchedule ts
                      JOIN PersonalInformation pi ON ts.soldier_id = pi.soldier_id
                      WHERE pi.role = %s
                      ORDER BY ts.training_date''', (role,))
    return cursor.fetchall()

# 훈련 일정 관리 기능
def manage_training_schedule(cursor):
    while True:
        print("\n훈련 일정 관리")
        print("1. 훈련 일정 추가")
        print("2. 훈련 일정 조회")
        print("3. 종료")
        
        choice = input("원하는 기능의 번호를 선택하세요: ")

        if choice == '1':
            soldier_id = int(input("병사 ID: "))
            training_date = input("훈련 날짜 (YYYY-MM-DD): ")
            training_details = input("훈련 상세 내용: ")
            add_training(cursor, soldier_id, training_date, training_details)

        elif choice == '2':
            print("\n조회할 병사의 역할 선택")
            print("1. 무선병")
            print("2. 유선병")
            print("3. 정보보호병")
            print("4. 전산장비병")
            print("5. 운영통제실병사")
            
            role_choice = input("원하는 역할의 번호를 선택하세요: ")
            roles = {
                '1': "무선병",
                '2': "유선병",
                '3': "정보보호병",
                '4': "전산장비병",
                '5': "운영통제실병사"
            }
            role = roles.get(role_choice)
            if role:
                trainings = get_training_by_role(cursor, role)
                if trainings:
                    print("\n훈련 일정 조회 결과:")
                    for training in trainings:
                        print(f"ID: {training[0]}, 이름: {training[1]}, 날짜: {training[2]}, 내용: {training[3]}")
                else:
                    print("해당 역할의 훈련 일정이 없습니다.")
            else:
                print("잘못된 입력입니다.")

        elif choice == '3':
            print("종료합니다.")
            break

        else:
            print("잘못된 입력입니다. 다시 시도하세요.")

# 메인 함수
def main():
    conn = connect_db()
    cursor = conn.cursor()
    
    try:
        while True:
            print("\n운영통제실 기능 선택")
            print("1. 병사 개인정보 관리")
            print("2. 훈련 일정 관리")
            print("3. 종료")
            
            choice = input("원하는 기능의 번호를 선택하세요: ")

            if choice == '1':
                manage_personal_info(cursor)
            elif choice == '2':
                manage_training_schedule(cursor)
            elif choice == '3':
                print("프로그램을 종료합니다.")
                break
            else:
                print("잘못된 입력입니다. 다시 시도하세요.")

        # 변경 사항 커밋
        conn.commit()
    
    except Exception as e:
        print(f"오류 발생: {e}")
        conn.rollback()  # 오류 발생 시 롤백

    finally:
        cursor.close()
        conn.close()

if __name__ == "__main__":
    main()
